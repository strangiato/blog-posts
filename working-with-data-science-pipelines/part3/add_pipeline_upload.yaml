apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: add-pipeline
  annotations:
    tekton.dev/output_artifacts: '{"add": [{"key": "artifacts/$PIPELINERUN/add/Output.tgz",
      "name": "add-Output", "path": "/tmp/outputs/Output/data"}], "add-2": [{"key":
      "artifacts/$PIPELINERUN/add-2/Output.tgz", "name": "add-2-Output", "path": "/tmp/outputs/Output/data"}]}'
    tekton.dev/input_artifacts: '{"add-2": [{"name": "add-Output", "parent_task":
      "add"}]}'
    tekton.dev/artifact_bucket: mlpipeline
    tekton.dev/artifact_endpoint: minio-service.kubeflow:9000
    tekton.dev/artifact_endpoint_scheme: http://
    tekton.dev/artifact_items: '{"add": [["Output", "$(results.output.path)"]], "add-2":
      [["Output", "$(results.output.path)"]]}'
    sidecar.istio.io/inject: "false"
    pipelines.kubeflow.org/pipeline_spec: '{"description": "A pipeline that adds numbers
      together", "inputs": [{"default": "1", "name": "a", "optional": true}, {"default":
      "7", "name": "b", "optional": true}], "name": "Add Pipeline"}'
spec:
  params:
  - {name: a, value: '1'}
  - {name: b, value: '7'}
  pipelineSpec:
    params:
    - {name: a, default: '1'}
    - {name: b, default: '7'}
    tasks:
    - name: add
      params:
      - {name: a, value: $(params.a)}
      taskSpec:
        steps:
        - name: main
          args: [--a, $(inputs.params.a), --b, '4', '----output-paths', $(results.output.path)]
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            echo -n "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def add(a, b):
                """Calculate the sum of the two arguments."""
                return a - b

            def _serialize_float(float_value: float) -> str:
                if isinstance(float_value, str):
                    return float_value
                if not isinstance(float_value, (float, int)):
                    raise TypeError('Value "{}" has type "{}" instead of float.'.format(str(float_value), str(type(float_value))))
                return str(float_value)

            import argparse
            _parser = argparse.ArgumentParser(prog='Add', description='Calculate the sum of the two arguments.')
            _parser.add_argument("--a", dest="a", type=float, required=True, default=argparse.SUPPRESS)
            _parser.add_argument("--b", dest="b", type=float, required=True, default=argparse.SUPPRESS)
            _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
            _parsed_args = vars(_parser.parse_args())
            _output_files = _parsed_args.pop("_output_paths", [])

            _outputs = add(**_parsed_args)

            _outputs = [_outputs]

            _output_serializers = [
                _serialize_float,

            ]

            import os
            for idx, output_file in enumerate(_output_files):
                try:
                    os.makedirs(os.path.dirname(output_file))
                except OSError:
                    pass
                with open(output_file, 'w') as f:
                    f.write(_output_serializers[idx](_outputs[idx]))
          image: image-registry.openshift-image-registry.svc:5000/openshift/python:latest
        params:
        - {name: a}
        results:
        - {name: output, description: /tmp/outputs/Output/data}
        metadata:
          annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Calculate
              the sum of the two arguments.", "implementation": {"container": {"args":
              ["--a", {"inputValue": "a"}, "--b", {"inputValue": "b"}, "----output-paths",
              {"outputPath": "Output"}], "command": ["sh", "-ec", "program_path=$(mktemp)\necho
              -n \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
              "def add(a, b):\n    \"\"\"Calculate the sum of the two arguments.\"\"\"\n    return
              a - b\n\ndef _serialize_float(float_value: float) -> str:\n    if isinstance(float_value,
              str):\n        return float_value\n    if not isinstance(float_value,
              (float, int)):\n        raise TypeError(''Value \"{}\" has type \"{}\"
              instead of float.''.format(str(float_value), str(type(float_value))))\n    return
              str(float_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Add'',
              description=''Calculate the sum of the two arguments.'')\n_parser.add_argument(\"--a\",
              dest=\"a\", type=float, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--b\",
              dest=\"b\", type=float, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
              dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
              = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = add(**_parsed_args)\n\n_outputs
              = [_outputs]\n\n_output_serializers = [\n    _serialize_float,\n\n]\n\nimport
              os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
              OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
              "image": "image-registry.openshift-image-registry.svc:5000/openshift/python:latest"}},
              "inputs": [{"name": "a", "type": "Float"}, {"name": "b", "type": "Float"}],
              "name": "Add", "outputs": [{"name": "Output", "type": "Float"}]}'}
      timeout: 0s
    - name: add-2
      params:
      - {name: add-Output, value: $(tasks.add.results.output)}
      - {name: b, value: $(params.b)}
      taskSpec:
        steps:
        - name: main
          args: [--a, $(inputs.params.add-Output), --b, $(inputs.params.b), '----output-paths',
            $(results.output.path)]
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            echo -n "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def add(a, b):
                """Calculate the sum of the two arguments."""
                return a - b

            def _serialize_float(float_value: float) -> str:
                if isinstance(float_value, str):
                    return float_value
                if not isinstance(float_value, (float, int)):
                    raise TypeError('Value "{}" has type "{}" instead of float.'.format(str(float_value), str(type(float_value))))
                return str(float_value)

            import argparse
            _parser = argparse.ArgumentParser(prog='Add', description='Calculate the sum of the two arguments.')
            _parser.add_argument("--a", dest="a", type=float, required=True, default=argparse.SUPPRESS)
            _parser.add_argument("--b", dest="b", type=float, required=True, default=argparse.SUPPRESS)
            _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
            _parsed_args = vars(_parser.parse_args())
            _output_files = _parsed_args.pop("_output_paths", [])

            _outputs = add(**_parsed_args)

            _outputs = [_outputs]

            _output_serializers = [
                _serialize_float,

            ]

            import os
            for idx, output_file in enumerate(_output_files):
                try:
                    os.makedirs(os.path.dirname(output_file))
                except OSError:
                    pass
                with open(output_file, 'w') as f:
                    f.write(_output_serializers[idx](_outputs[idx]))
          image: image-registry.openshift-image-registry.svc:5000/openshift/python:latest
        params:
        - {name: add-Output}
        - {name: b}
        results:
        - {name: output, description: /tmp/outputs/Output/data}
        metadata:
          annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Calculate
              the sum of the two arguments.", "implementation": {"container": {"args":
              ["--a", {"inputValue": "a"}, "--b", {"inputValue": "b"}, "----output-paths",
              {"outputPath": "Output"}], "command": ["sh", "-ec", "program_path=$(mktemp)\necho
              -n \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
              "def add(a, b):\n    \"\"\"Calculate the sum of the two arguments.\"\"\"\n    return
              a - b\n\ndef _serialize_float(float_value: float) -> str:\n    if isinstance(float_value,
              str):\n        return float_value\n    if not isinstance(float_value,
              (float, int)):\n        raise TypeError(''Value \"{}\" has type \"{}\"
              instead of float.''.format(str(float_value), str(type(float_value))))\n    return
              str(float_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Add'',
              description=''Calculate the sum of the two arguments.'')\n_parser.add_argument(\"--a\",
              dest=\"a\", type=float, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--b\",
              dest=\"b\", type=float, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
              dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
              = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = add(**_parsed_args)\n\n_outputs
              = [_outputs]\n\n_output_serializers = [\n    _serialize_float,\n\n]\n\nimport
              os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
              OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
              "image": "image-registry.openshift-image-registry.svc:5000/openshift/python:latest"}},
              "inputs": [{"name": "a", "type": "Float"}, {"name": "b", "type": "Float"}],
              "name": "Add", "outputs": [{"name": "Output", "type": "Float"}]}'}
      timeout: 0s
  timeout: 0s
